version: 2.1
workflows:
  test_build:
    jobs:
      - module_install
      # - test:
      #     requires:
      #       - module_install
      - build_deploy:
          # requires:
          #   - test
jobs:
  module_install:
    docker:
      - image: t1una/fec-frontend-build
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-cache-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: install dependencies
          command: yarn install
      - save_cache:
          key: yarn-cache-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
  test:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-cache-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: unit test
          command: yarn test
  build_deploy:
    docker:
      - image: t1una/fec-frontend-build
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-cache-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: yarn build
          command: |
            BRANCH_BASE=`echo "$CIRCLE_BRANCH" | awk -F'/' '{print $1}'`
            if [ "${BRANCH_BASE}" = "master" ]; then
              yarn build:master
            elif [ "${BRANCH_BASE}" = "release" ]; then
              yarn build:master
            elif [ "${BRANCH_BASE}" = "develop" ]; then
              yarn build:develop
            elif [ "${BRANCH_BASE}"  = "feature" ]; then
              yarn build:feature
            elif [ "${BRANCH_BASE}"  = "hotfixes" ]; then
              yarn build:master
            fi
      - add_ssh_keys:
          fingerprints:
            - host_fingerprint
      - run:
          name: add fingerprints
          command: ssh-keyscan ${hostname} >> ~/.ssh/known_hosts
      - run:
          name: mkdir
          command: |
            ssh ${username}@${hostname} "mkdir -p ${deploybase}/${CIRCLE_BRANCH}"
      - run:
          name: Send Via SFTP
          command: lftp sftp://${username}:@${hostname} -e "mirror -v -R -X empty public/. ${deploybase}/${CIRCLE_BRANCH}/.; quit"
